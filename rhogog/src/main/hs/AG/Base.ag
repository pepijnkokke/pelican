
-- |@Lx@: a lexicon contains a list of statements.
data Lx
   | Lx ss :: Ss

-- |@Ss@: a list of statements.
type Ss = [St]

-- |@Ss@: a statement is either a type statement
--  or a term definition.
data St
   | Ty an :: An ident :: Var ty1 :: Ty
   | Tm an :: An ident :: Var tm1 :: Tm
  
-- |@An@: an annotation is either public (+),
--  private (-) or "automatic" (@).
data An
   | Publ
   | Priv
   | Auto

{
type TyVar = Char
}

-- |@Ty@: a type is a series of single-character
--  variables with optional arrows.
data Ty
   | Var ident :: TyVar
   | App ty1,ty2 :: Ty
   | All ident :: TyVar ty1 :: Ty
  
{
type Var = String
}

-- |@Tm@: a term is either a variable, an application
--  or a lambda abstraction.
data Tm
   | Var ident :: Var
   | App tm1,tm2 :: Tm
   | Lam ident :: Var ty1 :: MbTy tm1 :: Tm

deriving * : Eq
