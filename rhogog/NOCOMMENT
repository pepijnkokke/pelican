
+ n     : et
+ n     = word
+ n_2   : eet
+ n_2   = word

+ np    : e
+ np    = word

+ v_1   : et
+ v_1   = word
+ v_2   : eet
+ v_2   = word
+ v_3   : eeet
+ v_3   = word 

+ mod_i : !a.(a -> t) -> a -> t
+ mod_i = \f:at.\x:a.f x /\ word x
+ mod_r : !a.(a -> t) -> a -> t
+ mod_r = \f:at.\x:a.f x /\ word f x

+ is    : eet
+ is    = \x:e.\y:e.x == y
+ is    : ((et)et) -> et
+ is    = \f:et.\x:e.f x

+ some  : (et)(et)t
+ some  = \f:et.\g:et.?x:e. f x /\ g x
+ every : (et)(et)t
+ every = \f:et.\g:et.!x:e. f x -> g x
+ the   : (et)(et)t
+ the   = \f:et.\g:et.ix:e. f x /\ g x
+ a     : (et)(et)t
+ a     = some
+ poss  : (et)(et)t
+ poss  = some

+ of    : et -> et -> et
+ of    : eet -> et -> et

@ raise : e -> (et)t
@ raise = \x:e.\f:et.f x
@ raise : et -> ((et)t)t
@ raise = \f:et.\p:(et)t.p f
@ raise : eet -> ((et)t)((et)t)t
@ raise = \f:eet.\p:(et)t.\q:(et)t.p (\x:e.q (\y:e.f x y))
@ raise : eet -> ((et)t)et
@ raise = \f:eet.\p:(et)t.\y:e.p (\x:e.f x y)
@ raise : eet -> e((et)t)t
@ raise = \f:eet.\x:e.\q:(et)t.q (\y:e.f x y)
